---
export interface Props {
  content: string;
  toolTitle?: string;
  showOnlyIfHeadings?: boolean;
}

const { content, toolTitle, showOnlyIfHeadings = true } = Astro.props;

// Extract headings from markdown content with improved parsing
function extractHeadings(content: string) {
  const headingRegex = /^(#{1,6})\s+(.+)$/gm;
  const headings: Array<{ level: number; text: string; id: string }> = [];
  let match;
  
  while ((match = headingRegex.exec(content)) !== null) {
    const level = match[1].length;
    const text = match[2].trim().replace(/[*_`]/g, ''); // Remove markdown formatting
    const id = text.toLowerCase()
      .replace(/[^a-z0-9\s-]/g, '') // Remove special chars except spaces and hyphens
      .replace(/\s+/g, '-') // Replace spaces with hyphens
      .replace(/^-+|-+$/g, ''); // Remove leading/trailing hyphens
    
    if (text && id) {
      headings.push({ level, text, id });
    }
  }
  
  return headings;
}

function calculateReadingTime(content: string) {
  // Remove markdown syntax for more accurate word count
  const cleanContent = content
    .replace(/#{1,6}\s+/g, '') // Remove heading markers
    .replace(/\*\*(.+?)\*\*/g, '$1') // Remove bold markers
    .replace(/\*(.+?)\*/g, '$1') // Remove italic markers
    .replace(/`(.+?)`/g, '$1') // Remove code markers
    .replace(/\[(.+?)\]\(.+?\)/g, '$1') // Replace links with text
    .replace(/^[-*+]\s+/gm, '') // Remove list markers
    .replace(/^\d+\.\s+/gm, ''); // Remove numbered list markers
  
  const words = cleanContent.split(/\s+/).filter(word => word.length > 0).length;
  const wordsPerMinute = 200;
  return Math.ceil(words / wordsPerMinute);
}

const headings = extractHeadings(content);
const readingTime = calculateReadingTime(content);

// Only show if there are headings (unless specifically disabled)
const shouldShow = showOnlyIfHeadings ? headings.length > 0 : true;
---

{shouldShow && (
<div
  class="fixed right-8 top-1/2 transform -translate-y-1/2 w-80 max-h-96 bg-zinc-900/90 backdrop-blur-sm border border-zinc-700 rounded-xl p-4 shadow-xl z-40 hidden lg:block"
  x-data="{ 
    activeSection: '',
    isVisible: true,
    observer: null,
    scrollProgress: 0
  }"
  x-init="
    // Initialize Intersection Observer
    observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          activeSection = entry.target.id;
        }
      });
    }, { rootMargin: '-20% 0px -80% 0px' });
    
    // Observe all heading elements
    document.querySelectorAll('h1, h2, h3, h4, h5, h6').forEach(heading => {
      if (heading.id) observer.observe(heading);
    });
    
    // Update scroll progress
    const updateProgress = () => {
      const winScroll = document.body.scrollTop || document.documentElement.scrollTop;
      const height = document.documentElement.scrollHeight - document.documentElement.clientHeight;
      scrollProgress = height > 0 ? Math.min(100, Math.max(0, (winScroll / height) * 100)) : 0;
    };
    
    // Initial calculation
    updateProgress();
    
    // Listen for scroll events
    window.addEventListener('scroll', updateProgress, { passive: true });
  "
  x-show="isVisible"
  x-transition:enter="transition ease-out duration-300"
  x-transition:enter-start="opacity-0 transform translate-x-4"
  x-transition:enter-end="opacity-100 transform translate-x-0"
>
  <!-- Header -->
  <div class="flex items-center justify-between mb-4 pb-3 border-b border-zinc-700">
    <div>
      <h3 class="text-sm font-semibold text-white">Table of Contents</h3>
      <p class="text-xs text-zinc-400">{readingTime} min read</p>
    </div>
    <button 
      @click="isVisible = false"
      class="text-zinc-400 hover:text-white transition-colors p-1"
      title="Hide TOC"
    >
      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
      </svg>
    </button>
  </div>

  <!-- TOC Items -->
  <nav class="space-y-1 max-h-64 overflow-y-auto custom-scrollbar">
    {headings.map((heading) => (
      <a
        href={`#${heading.id}`}
        class={`block text-sm transition-all duration-200 hover:text-red-400 py-1 px-2 rounded border-l-2 border-transparent hover:border-red-400 ${
          heading.level === 1 ? 'font-semibold text-white' :
          heading.level === 2 ? 'font-medium text-zinc-200 ml-2' :
          heading.level === 3 ? 'text-zinc-300 ml-4' :
          'text-zinc-400 ml-6'
        }`}
        :class="{
          'border-red-400 text-red-400 bg-red-400/10': activeSection === heading.id,
          'text-zinc-400': activeSection !== heading.id
        }"
        @click="
          document.getElementById(heading.id)?.scrollIntoView({ 
            behavior: 'smooth', 
            block: 'start' 
          });
        "
      >
        {heading.text}
      </a>
    ))}
  </nav>

  <!-- Progress Bar -->
  <div class="mt-4 pt-3 border-t border-zinc-700">
    <div class="flex items-center justify-between text-xs text-zinc-400 mb-2">
      <span>Reading Progress</span>
      <span x-text="`${Math.round(scrollProgress)}%`">0%</span>
    </div>
    <div class="w-full bg-zinc-700 rounded-full h-1">
      <div 
        class="bg-red-500 h-1 rounded-full transition-all duration-200"
        :style="`width: ${scrollProgress}%`"
      ></div>
    </div>
  </div>
</div>

<!-- Toggle Button (when TOC is hidden) -->
<button 
  x-show="!isVisible"
  @click="isVisible = true"
  class="fixed right-8 top-1/2 transform -translate-y-1/2 bg-zinc-900/90 backdrop-blur-sm border border-zinc-700 rounded-full p-3 shadow-xl z-40 text-zinc-400 hover:text-white transition-all duration-200 hidden lg:block"
  title="Show TOC"
  x-transition:enter="transition ease-out duration-300"
  x-transition:enter-start="opacity-0 transform translate-x-4"
  x-transition:enter-end="opacity-100 transform translate-x-0"
>
  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
  </svg>
</button>
)}

<style>
  .custom-scrollbar::-webkit-scrollbar {
    width: 4px;
  }
  
  .custom-scrollbar::-webkit-scrollbar-track {
    background: rgb(63 63 70);
    border-radius: 2px;
  }
  
  .custom-scrollbar::-webkit-scrollbar-thumb {
    background: rgb(113 113 122);
    border-radius: 2px;
  }
  
  .custom-scrollbar::-webkit-scrollbar-thumb:hover {
    background: rgb(161 161 170);
  }
</style>
