---
export interface Props {
  currentPage?: string;
}

const { currentPage } = Astro.props;

const navigation = [
  { name: 'Home', href: '/' },
  { name: 'Menu', href: '/#menu' },
  { name: 'Locations', href: '/#locations' },
  { name: 'Services', href: '/#services' },
  { name: 'About', href: '/#about' },
  { name: 'Contact', href: '/#contact' }
];
---

<header class="bg-base-100/95 backdrop-blur-md shadow-lg sticky top-0 z-50 transition-all duration-300" id="header">
  <nav class="container-custom">
    <div class="flex items-center justify-between h-20">
      <!-- Logo -->
      <div class="flex items-center">
        <a href="/" class="flex items-center space-x-3">
          <div class="w-12 h-12 bg-primary rounded-full flex items-center justify-center">
            <span class="text-primary-content font-bold text-xl">R</span>
          </div>
          <div>
            <h1 class="text-2xl font-bold text-base-content">Restaurant Name</h1>
            <p class="text-sm text-base-content/70">Fine Dining Experience</p>
          </div>
        </a>
      </div>

      <!-- Desktop Navigation -->
      <div class="hidden md:flex items-center space-x-8">
        {navigation.map((item) => (
          <a
            href={item.href}
            class={`font-medium transition-colors duration-200 ${
              currentPage === item.name.toLowerCase() || 
              (currentPage === 'home' && item.name === 'Home')
                ? 'text-primary border-b-2 border-primary'
                : 'text-base-content hover:text-primary'
            }`}
          >
            {item.name}
          </a>
        ))}
        <a href="/#reservations" class="btn-primary hidden sm:inline-flex">
          Make Reservation
        </a>
      </div>

      <!-- Mobile menu button -->
      <div class="md:hidden">
        <button
          id="mobile-menu-button"
          class="text-base-content hover:text-primary transition-colors duration-200"
          aria-label="Toggle mobile menu"
        >
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
          </svg>
        </button>
      </div>
    </div>

    <!-- Mobile Navigation -->
    <div id="mobile-menu" class="md:hidden hidden border-t border-base-300">
      <div class="px-2 pt-2 pb-3 space-y-1">
        {navigation.map((item) => (
          <a
            href={item.href}
            class={`block px-3 py-2 rounded-md text-base font-medium transition-colors duration-200 ${
              currentPage === item.name.toLowerCase() || 
              (currentPage === 'home' && item.name === 'Home')
                ? 'text-primary bg-primary/10'
                : 'text-base-content hover:text-primary hover:bg-primary/5'
            }`}
          >
            {item.name}
          </a>
        ))}
        <a href="/#reservations" class="block w-full text-center btn-primary mt-4">
          Make Reservation
        </a>
      </div>
    </div>
  </nav>
</header>

<script>
  // Enhanced mobile menu and header interactions
  document.addEventListener('DOMContentLoaded', function() {
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    const header = document.getElementById('header');
    
    // Mobile menu toggle
    if (mobileMenuButton && mobileMenu) {
      mobileMenuButton.addEventListener('click', function() {
        mobileMenu.classList.toggle('hidden');
        // Update button icon
        const icon = mobileMenuButton.querySelector('svg');
        if (icon) {
          icon.classList.toggle('rotate-90');
        }
      });
    }
    
    // Header scroll effect
    let lastScrollY = window.scrollY;
    window.addEventListener('scroll', () => {
      const currentScrollY = window.scrollY;
      
      if (currentScrollY > 100) {
        header.classList.add('shadow-xl');
      } else {
        header.classList.remove('shadow-xl');
      }
      
      lastScrollY = currentScrollY;
    });
    
    // Smooth scroll for anchor links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
      anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        if (target) {
          target.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });
          // Close mobile menu if open
          if (mobileMenu && !mobileMenu.classList.contains('hidden')) {
            mobileMenu.classList.add('hidden');
          }
        }
      });
    });
  });
</script>
