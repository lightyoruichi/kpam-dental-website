---
// Theme switcher component
---

<div class="theme-switcher fixed bottom-8 right-8 z-50">
  <div class="bg-white rounded-full shadow-lg p-3 flex items-center gap-2 border border-gray-200">
    <label for="theme-select" class="text-sm font-semibold text-gray-700 sr-only">Select Theme</label>
    <select 
      id="theme-select" 
      class="theme-select text-sm px-3 py-2 rounded-lg border border-gray-300 cursor-pointer bg-white text-gray-900 focus:outline-none focus:ring-2 focus:ring-gray-900 transition-all duration-200"
      aria-label="Theme selector"
    >
      <option value="monochrome">âš« Monochrome</option>
      <option value="alien">ðŸŸ¢ Alien</option>
      <option value="jellyfish">ðŸŸ£ Jellyfish</option>
      <option value="papaya">ðŸŸ  Papaya</option>
    </select>
  </div>
</div>

<script>
  // Theme definitions
  const themes = {
    monochrome: {
      primary: '#000000',
      secondary: '#191919',
      accent: '#393939',
      light: '#ffffff',
      background: '#ffffff',
      backgroundAlt: '#fafafa',
      surface: '#f5f5f5',
      border: '#e5e5e5',
      text: '#000000',
      textSecondary: '#393939',
      textLight: '#747474',
    },
    alien: {
      primary: '#32ac64',
      secondary: '#54ca84',
      accent: '#bbeace',
      light: '#ffffff',
      background: '#ffffff',
      backgroundAlt: '#ddf4e6',
      surface: '#f5f5f5',
      border: '#e5e5e5',
      text: '#191919',
      textSecondary: '#393939',
      textLight: '#747474',
    },
    jellyfish: {
      primary: '#7a7add',
      secondary: '#a2a2fc',
      accent: '#dadafe',
      light: '#ffffff',
      background: '#ffffff',
      backgroundAlt: '#ececfe',
      surface: '#f5f5f5',
      border: '#e5e5e5',
      text: '#191919',
      textSecondary: '#393939',
      textLight: '#747474',
    },
    papaya: {
      primary: '#de5c1c',
      secondary: '#ff7b3a',
      accent: '#ffc4a7',
      light: '#ffffff',
      background: '#ffffff',
      backgroundAlt: '#ffe5d8',
      surface: '#f5f5f5',
      border: '#e5e5e5',
      text: '#191919',
      textSecondary: '#393939',
      textLight: '#747474',
    }
  };

  function applyTheme(themeName: string) {
    const theme = themes[themeName as keyof typeof themes];
    if (!theme) return;

    const root = document.documentElement;
    root.style.setProperty('--theme-primary', theme.primary);
    root.style.setProperty('--theme-secondary', theme.secondary);
    root.style.setProperty('--theme-accent', theme.accent);
    root.style.setProperty('--theme-light', theme.light);
    root.style.setProperty('--theme-background', theme.background);
    root.style.setProperty('--theme-background-alt', theme.backgroundAlt);
    root.style.setProperty('--theme-surface', theme.surface);
    root.style.setProperty('--theme-border', theme.border);
    root.style.setProperty('--theme-text', theme.text);
    root.style.setProperty('--theme-text-secondary', theme.textSecondary);
    root.style.setProperty('--theme-text-light', theme.textLight);
    
    // Apply theme class to body
    if (document.body) {
      document.body.className = document.body.className.replace(/theme-\w+/g, '');
      document.body.classList.add(`theme-${themeName}`);
    }
    
    // Also directly style elements with the theme colors
    setTimeout(() => {
      // Background colors
      const darkSections = document.querySelectorAll('.bg-gray-900');
      darkSections.forEach((el) => {
        (el as HTMLElement).style.backgroundColor = theme.primary;
      });
      
      const blackBg = document.querySelectorAll('.bg-black');
      blackBg.forEach((el) => {
        (el as HTMLElement).style.backgroundColor = theme.primary;
      });
      
      const gray50 = document.querySelectorAll('.bg-gray-50');
      gray50.forEach((el) => {
        (el as HTMLElement).style.backgroundColor = theme.backgroundAlt;
      });
      
      const gray100 = document.querySelectorAll('.bg-gray-100');
      gray100.forEach((el) => {
        (el as HTMLElement).style.backgroundColor = theme.surface;
      });
      
      // Update colored backgrounds for theme colors only (not other colors)
      if (themeName !== 'monochrome') {
        const coloredBg = document.querySelectorAll('.bg-blue-50, .bg-green-50, .bg-purple-50, .bg-slate-50');
        coloredBg.forEach((el) => {
          (el as HTMLElement).style.backgroundColor = theme.backgroundAlt;
        });
      }
      
      // Gradient backgrounds
      const gradientSections = document.querySelectorAll('.bg-gradient-to-r.from-gray-900');
      gradientSections.forEach((el) => {
        (el as HTMLElement).style.background = `linear-gradient(to right, ${theme.primary}, ${theme.secondary})`;
      });
      
      // Text colors
      const whiteText = document.querySelectorAll('.text-white');
      whiteText.forEach((el) => {
        (el as HTMLElement).style.color = theme.light;
      });
      
      const gray900Text = document.querySelectorAll('.text-gray-900');
      gray900Text.forEach((el) => {
        (el as HTMLElement).style.color = theme.text;
      });
      
      const gray600Text = document.querySelectorAll('.text-gray-600');
      gray600Text.forEach((el) => {
        (el as HTMLElement).style.color = theme.textSecondary;
      });
      
      const gray700Text = document.querySelectorAll('.text-gray-700');
      gray700Text.forEach((el) => {
        (el as HTMLElement).style.color = theme.textSecondary;
      });
      
      const gray500Text = document.querySelectorAll('.text-gray-500');
      gray500Text.forEach((el) => {
        (el as HTMLElement).style.color = theme.textLight;
      });
      
      // Border colors
      const gray200Border = document.querySelectorAll('.border-gray-200');
      gray200Border.forEach((el) => {
        (el as HTMLElement).style.borderColor = theme.border;
      });
      
      const gray300Border = document.querySelectorAll('.border-gray-300');
      gray300Border.forEach((el) => {
        (el as HTMLElement).style.borderColor = theme.border;
      });
    }, 100);
  }

  // Wait for DOM to be ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeTheme);
  } else {
    initializeTheme();
  }

  function initializeTheme() {
    // Initialize theme from localStorage or default to monochrome
    const savedTheme = localStorage.getItem('theme') || 'monochrome';
    applyTheme(savedTheme);
    
    // Set up the select element
    const select = document.getElementById('theme-select') as HTMLSelectElement;
    if (select) {
      select.value = savedTheme;
      
      select.addEventListener('change', (e) => {
        const theme = (e.target as HTMLSelectElement).value;
        localStorage.setItem('theme', theme);
        applyTheme(theme);
      });
    }
  }
</script>

<style is:global>
  .theme-switcher {
    transition: all 0.3s ease;
  }
  
  .theme-switcher:hover {
    transform: scale(1.05);
  }
  
  /* Smooth transitions for theme changes */
  body.theme-monochrome,
  body.theme-alien,
  body.theme-jellyfish,
  body.theme-papaya {
    transition: background-color 0.3s ease, color 0.3s ease;
  }
  
  /* Dark theme sections */
  body.theme-monochrome .bg-gray-900,
  body.theme-alien .bg-gray-900,
  body.theme-jellyfish .bg-gray-900,
  body.theme-papaya .bg-gray-900 {
    background-color: var(--theme-primary) !important;
    transition: background-color 0.3s ease;
  }
  
  body.theme-monochrome .text-white,
  body.theme-alien .text-white,
  body.theme-jellyfish .text-white,
  body.theme-papaya .text-white {
    color: var(--theme-light) !important;
    transition: color 0.3s ease;
  }
  
  body.theme-monochrome .text-gray-300,
  body.theme-alien .text-gray-300,
  body.theme-jellyfish .text-gray-300,
  body.theme-papaya .text-gray-300 {
    color: var(--theme-accent) !important;
    transition: color 0.3s ease;
  }
  
  /* Button styles */
  body.theme-monochrome .bg-black,
  body.theme-alien .bg-black,
  body.theme-jellyfish .bg-black,
  body.theme-papaya .bg-black {
    background-color: var(--theme-primary) !important;
    transition: background-color 0.3s ease;
  }
  
  body.theme-monochrome .hover\:bg-black:hover,
  body.theme-alien .hover\:bg-black:hover,
  body.theme-jellyfish .hover\:bg-black:hover,
  body.theme-papaya .hover\:bg-black:hover {
    background-color: var(--theme-secondary) !important;
  }
  
  body.theme-monochrome .hover\:bg-gray-900:hover,
  body.theme-alien .hover\:bg-gray-900:hover,
  body.theme-jellyfish .hover\:bg-gray-900:hover,
  body.theme-papaya .hover\:bg-gray-900:hover {
    background-color: var(--theme-secondary) !important;
  }
  
  /* Gradient backgrounds */
  body.theme-monochrome .bg-gradient-to-r.from-gray-900,
  body.theme-alien .bg-gradient-to-r.from-gray-900,
  body.theme-jellyfish .bg-gradient-to-r.from-gray-900,
  body.theme-papaya .bg-gradient-to-r.from-gray-900 {
    background: linear-gradient(to right, var(--theme-primary), var(--theme-secondary)) !important;
    transition: background 0.3s ease;
  }
  
  /* Text colors */
  body.theme-monochrome .text-gray-900,
  body.theme-alien .text-gray-900,
  body.theme-jellyfish .text-gray-900,
  body.theme-papaya .text-gray-900 {
    color: var(--theme-text) !important;
    transition: color 0.3s ease;
  }
  
  body.theme-monochrome .text-gray-600,
  body.theme-alien .text-gray-600,
  body.theme-jellyfish .text-gray-600,
  body.theme-papaya .text-gray-600 {
    color: var(--theme-text-secondary) !important;
    transition: color 0.3s ease;
  }
  
  body.theme-monochrome .text-gray-700,
  body.theme-alien .text-gray-700,
  body.theme-jellyfish .text-gray-700,
  body.theme-papaya .text-gray-700 {
    color: var(--theme-text-secondary) !important;
    transition: color 0.3s ease;
  }
  
  /* Border colors */
  body.theme-monochrome .border-gray-200,
  body.theme-alien .border-gray-200,
  body.theme-jellyfish .border-gray-200,
  body.theme-papaya .border-gray-200 {
    border-color: var(--theme-border) !important;
    transition: border-color 0.3s ease;
  }
  
  body.theme-monochrome .border-gray-100,
  body.theme-alien .border-gray-100,
  body.theme-jellyfish .border-gray-100,
  body.theme-papaya .border-gray-100 {
    border-color: var(--theme-surface) !important;
    transition: border-color 0.3s ease;
  }
  
  /* Card backgrounds */
  body.theme-monochrome .bg-gray-50,
  body.theme-alien .bg-gray-50,
  body.theme-jellyfish .bg-gray-50,
  body.theme-papaya .bg-gray-50 {
    background-color: var(--theme-background-alt) !important;
    transition: background-color 0.3s ease;
  }
  
  /* White backgrounds stay white */
  body.theme-monochrome .bg-white,
  body.theme-alien .bg-white,
  body.theme-jellyfish .bg-white,
  body.theme-papaya .bg-white {
    background-color: var(--theme-background) !important;
    transition: background-color 0.3s ease;
  }
  
  /* Gradient from gray-100 to gray-200 */
  body.theme-monochrome .bg-gradient-to-br.from-gray-100 {
    background: linear-gradient(to bottom right, var(--theme-surface), var(--theme-border)) !important;
    transition: background 0.3s ease;
  }
  
  body.theme-alien .bg-gradient-to-br.from-gray-100,
  body.theme-jellyfish .bg-gradient-to-br.from-gray-100,
  body.theme-papaya .bg-gradient-to-br.from-gray-100 {
    background: linear-gradient(to bottom right, var(--theme-accent), var(--theme-secondary)) !important;
    transition: background 0.3s ease;
  }
  
  /* Shadow blurs */
  body.theme-monochrome .bg-white\/10 {
    background-color: rgba(255, 255, 255, 0.1) !important;
  }
  
  body.theme-alien .bg-white\/10,
  body.theme-jellyfish .bg-white\/10,
  body.theme-papaya .bg-white\/10 {
    background-color: rgba(255, 255, 255, 0.15) !important;
  }
  
  /* Icon backgrounds in cards */
  body.theme-monochrome .bg-gray-100,
  body.theme-alien .bg-gray-100,
  body.theme-jellyfish .bg-gray-100,
  body.theme-papaya .bg-gray-100 {
    background-color: var(--theme-surface) !important;
    transition: background-color 0.3s ease;
  }
  
  /* Colored backgrounds used in other pages */
  body.theme-alien .bg-blue-50,
  body.theme-alien .bg-green-50,
  body.theme-alien .bg-purple-50,
  body.theme-alien .bg-slate-50 {
    background-color: var(--theme-background-alt) !important;
    transition: background-color 0.3s ease;
  }
  
  body.theme-jellyfish .bg-blue-50,
  body.theme-jellyfish .bg-green-50,
  body.theme-jellyfish .bg-purple-50,
  body.theme-jellyfish .bg-slate-50 {
    background-color: var(--theme-background-alt) !important;
    transition: background-color 0.3s ease;
  }
  
  body.theme-papaya .bg-blue-50,
  body.theme-papaya .bg-green-50,
  body.theme-papaya .bg-purple-50,
  body.theme-papaya .bg-slate-50 {
    background-color: var(--theme-background-alt) !important;
    transition: background-color 0.3s ease;
  }
  
  /* Text colors for colored backgrounds */
  body.theme-alien .text-blue-600,
  body.theme-alien .text-green-600,
  body.theme-alien .text-purple-600 {
    color: var(--theme-primary) !important;
    transition: color 0.3s ease;
  }
  
  body.theme-jellyfish .text-blue-600,
  body.theme-jellyfish .text-green-600,
  body.theme-jellyfish .text-purple-600 {
    color: var(--theme-primary) !important;
    transition: color 0.3s ease;
  }
  
  body.theme-papaya .text-blue-600,
  body.theme-papaya .text-green-600,
  body.theme-papaya .text-purple-600 {
    color: var(--theme-primary) !important;
    transition: color 0.3s ease;
  }
  
  /* Social icon hover effects */
  body.theme-monochrome .hover\:bg-black:hover,
  body.theme-alien .hover\:bg-black:hover,
  body.theme-jellyfish .hover\:bg-black:hover,
  body.theme-papaya .hover\:bg-black:hover {
    background-color: var(--theme-primary) !important;
  }
  
  body.theme-monochrome .hover\:text-white:hover,
  body.theme-alien .hover\:text-white:hover,
  body.theme-jellyfish .hover\:text-white:hover,
  body.theme-papaya .hover\:text-white:hover {
    color: var(--theme-light) !important;
  }
  
  /* Button hover effects */
  body.theme-monochrome .hover\:bg-gray-50:hover,
  body.theme-alien .hover\:bg-gray-50:hover,
  body.theme-jellyfish .hover\:bg-gray-50:hover,
  body.theme-papaya .hover\:bg-gray-50:hover {
    background-color: var(--theme-background-alt) !important;
  }
</style>

