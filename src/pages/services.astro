---
import BaseLayout from '../components/BaseLayout.astro';
import { services } from '../config/services';

const pageTitle = "Our Services - Professional Solutions";
const pageDescription = "Explore our comprehensive range of professional services designed to meet your needs.";
---

<BaseLayout 
  title={pageTitle}
  description={pageDescription}
  currentPage="services"
>
  <!-- Hero Section -->
  <section class="relative py-24 bg-gradient-to-br from-slate-50 via-blue-50 to-cyan-50 overflow-hidden">
    <!-- Background Video -->
    <div class="absolute inset-0 opacity-10">
      <video 
        autoplay 
        loop 
        muted 
        playsinline
        class="w-full h-full object-cover"
        onerror="this.style.display='none';"
      >
        <source src="/videos/4490552-uhd_3840_2160_25fps.mp4" type="video/mp4" media="(min-width: 768px)">
        <source src="/videos/3024319-hd_1920_1080_30fps.mp4" type="video/mp4">
      </video>
    </div>
    <div class="absolute inset-0">
      <div class="absolute top-20 right-20 w-96 h-96 bg-gradient-to-br from-cyan-200/20 to-blue-200/20 rounded-full blur-3xl"></div>
      <div class="absolute bottom-20 left-20 w-80 h-80 bg-gradient-to-tr from-emerald-200/20 to-teal-200/20 rounded-full blur-3xl"></div>
    </div>
    
    <div class="container-custom relative z-10 max-w-7xl mx-auto">
      <div class="text-center mb-16">
        <div class="inline-flex items-center space-x-2 bg-gradient-to-r from-cyan-100 to-blue-100 px-4 py-2 rounded-full mb-6">
          <div class="w-2 h-2 bg-gradient-to-r from-cyan-500 to-blue-500 rounded-full"></div>
          <span class="text-sm font-semibold text-slate-700">Our Services</span>
        </div>
        
        <h1 class="text-5xl font-bold text-slate-800 mb-6 leading-tight">
          Comprehensive Services
        </h1>
        
        <p class="text-xl text-slate-600 max-w-3xl mx-auto leading-relaxed">
          From basic consultations to advanced solutions, we offer a full range of services 
          tailored to your unique needs and goals.
        </p>
      </div>
      
      <!-- Services Grid -->
      <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
        {services.map((service) => (
          <a 
            href={`/services/${service.slug}`}
            class="group bg-white/80 backdrop-blur-sm rounded-3xl p-8 shadow-xl hover:shadow-2xl transition-all duration-300 border border-white/20 hover:scale-105"
          >
            <!-- Service Icon -->
            <div class="w-20 h-20 bg-gradient-to-br from-cyan-500 to-blue-600 rounded-2xl flex items-center justify-center mb-6 group-hover:scale-110 transition-transform">
              <svg class="w-10 h-10 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={service.icon}></path>
              </svg>
            </div>
            
            <!-- Service Info -->
            <div class="space-y-4">
              <div class="flex items-center justify-between">
                <h3 class="text-2xl font-bold text-slate-800 group-hover:text-cyan-600 transition-colors">
                  {service.name}
                </h3>
                {service.popular && (
                  <span class="px-3 py-1 bg-gradient-to-r from-amber-100 to-orange-100 text-amber-700 rounded-full text-sm font-medium">
                    Popular
                  </span>
                )}
              </div>
              
              <div class="inline-flex items-center px-3 py-1 bg-gradient-to-r from-slate-100 to-blue-100 text-slate-700 rounded-full text-sm font-medium">
                {service.category}
              </div>
              
              <p class="text-slate-600 leading-relaxed">
                {service.description}
              </p>
              
              <div class="flex items-center justify-between pt-4 border-t border-slate-200">
                <div>
                  <p class="text-sm text-slate-500">Starting at</p>
                  <p class="text-2xl font-bold bg-gradient-to-r from-cyan-600 to-blue-600 bg-clip-text text-transparent">
                    {service.price}
                  </p>
                </div>
                <div class="text-right">
                  <p class="text-sm text-slate-500">Duration</p>
                  <p class="text-lg font-semibold text-slate-700">{service.duration}</p>
                </div>
              </div>
              
              <!-- Sub-services Count -->
              {service.subServices && service.subServices.length > 0 && (
                <div class="pt-4 border-t border-slate-200">
                  <span class="text-sm text-slate-600">
                    {service.subServices.length} package{service.subServices.length > 1 ? 's' : ''} available
                  </span>
                </div>
              )}
              
              <!-- View Details Link -->
              <div class="pt-4">
                <span class="inline-flex items-center text-cyan-600 font-semibold group-hover:translate-x-1 transition-transform">
                  View Details
                  <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6"></path>
                  </svg>
                </span>
              </div>
            </div>
          </a>
        ))}
      </div>
    </div>
  </section>
</BaseLayout>

<script>
  // Optimize video loading for mobile and low bandwidth
  document.addEventListener('DOMContentLoaded', function() {
    const videos = document.querySelectorAll('video');
    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
    const isMobile = window.innerWidth < 768;
    const connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection;
    
    const isSlowConnection = connection && (
      connection.effectiveType === 'slow-2g' || 
      connection.effectiveType === '2g' ||
      connection.downlink < 1.5
    );
    
    videos.forEach(video => {
      if (isMobile || isSlowConnection || prefersReducedMotion) {
        video.style.display = 'none';
      } else {
        const observer = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              const vid = entry.target;
              vid.play().catch(() => {
                vid.style.display = 'none';
              });
              observer.unobserve(vid);
            }
          });
        }, { rootMargin: '50px' });
        
        observer.observe(video);
      }
    });
  });
</script>

